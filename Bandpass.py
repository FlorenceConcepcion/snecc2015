import sncosmo
import numpy as np

# Load data from file detailing intensity/frequency relation.
# data=np.loadtxt('PTF48R.dat')

# Data from file above.
data = [np.array([5580., 0.]), np.array([5.60000000e+03, 2.00000000e-05]), np.array([5.62000000e+03, 9.00000000e-05]),
        np.array([5.64000000e+03, 3.70000000e-04]), np.array([5.66000000e+03, 1.25000000e-03]),
        np.array([5.68000000e+03, 3.41000000e-03]), np.array([5.70000000e+03, 8.01000000e-03]),
        np.array([5.72000000e+03, 1.64500000e-02]), np.array([5.74000000e+03, 2.98600000e-02]),
        np.array([5.76000000e+03, 4.90000000e-02]), np.array([5.78000000e+03, 7.40700000e-02]),
        np.array([5.80000000e+03, 1.04870000e-01]), np.array([5.82000000e+03, 1.40860000e-01]),
        np.array([5.84000000e+03, 1.81610000e-01]), np.array([5.86000000e+03, 2.26630000e-01]),
        np.array([5.88000000e+03, 2.75640000e-01]), np.array([5.90000000e+03, 3.27910000e-01]),
        np.array([5.92000000e+03, 3.82160000e-01]), np.array([5.94000000e+03, 4.36450000e-01]),
        np.array([5.96000000e+03, 4.88760000e-01]), np.array([5.98000000e+03, 5.37170000e-01]),
        np.array([6.00000000e+03, 5.80420000e-01]), np.array([6.02000000e+03, 6.17270000e-01]),
        np.array([6.04000000e+03, 6.49460000e-01]), np.array([6.06000000e+03, 6.78760000e-01]),
        np.array([6.08000000e+03, 7.07260000e-01]), np.array([6.10000000e+03, 7.36330000e-01]),
        np.array([6.12000000e+03, 7.66180000e-01]), np.array([6.14000000e+03, 7.95970000e-01]),
        np.array([6.16000000e+03, 8.24210000e-01]), np.array([6.18000000e+03, 8.48770000e-01]),
        np.array([6.20000000e+03, 8.67710000e-01]), np.array([6.22000000e+03, 8.80090000e-01]),
        np.array([6.24000000e+03, 8.86270000e-01]), np.array([6.26000000e+03, 8.88290000e-01]),
        np.array([6.28000000e+03, 8.88980000e-01]), np.array([6.30000000e+03, 8.90880000e-01]),
        np.array([6.32000000e+03, 8.95470000e-01]), np.array([6.34000000e+03, 9.03210000e-01]),
        np.array([6.36000000e+03, 9.13120000e-01]), np.array([6.38000000e+03, 9.23470000e-01]),
        np.array([6.40000000e+03, 9.32230000e-01]), np.array([6.42000000e+03, 9.37770000e-01]),
        np.array([6.44000000e+03, 9.39420000e-01]), np.array([6.46000000e+03, 9.37650000e-01]),
        np.array([6.48000000e+03, 9.33430000e-01]), np.array([6.50000000e+03, 9.28140000e-01]),
        np.array([6.52000000e+03, 9.22730000e-01]), np.array([6.54000000e+03, 9.17910000e-01]),
        np.array([6.56000000e+03, 9.14230000e-01]), np.array([6.58000000e+03, 9.12030000e-01]),
        np.array([6.60000000e+03, 9.12240000e-01]), np.array([6.62000000e+03, 9.15950000e-01]),
        np.array([6.64000000e+03, 9.23610000e-01]), np.array([6.66000000e+03, 9.34860000e-01]),
        np.array([6.68000000e+03, 9.48710000e-01]), np.array([6.70000000e+03, 9.63940000e-01]),
        np.array([6.72000000e+03, 9.78650000e-01]), np.array([6.74000000e+03, 9.91010000e-01]),
        np.array([6.76000000e+03, 9.98750000e-01]), np.array([6.78000000e+03, 1.00000000e+00]),
        np.array([6.80000000e+03, 9.94680000e-01]), np.array([6.82000000e+03, 9.84230000e-01]),
        np.array([6.84000000e+03, 9.71240000e-01]), np.array([6.86000000e+03, 9.58230000e-01]),
        np.array([6.88000000e+03, 9.47300000e-01]), np.array([6.90000000e+03, 9.39730000e-01]),
        np.array([6.92000000e+03, 9.36170000e-01]), np.array([6.94000000e+03, 9.37140000e-01]),
        np.array([6.96000000e+03, 9.42450000e-01]), np.array([6.98000000e+03, 9.51280000e-01]),
        np.array([7.00000000e+03, 9.61880000e-01]), np.array([7.02000000e+03, 9.67240000e-01]),
        np.array([7.04000000e+03, 9.70000000e-01]), np.array([7.06000000e+03, 9.69430000e-01]),
        np.array([7.08000000e+03, 9.63420000e-01]), np.array([7.10000000e+03, 9.45840000e-01]),
        np.array([7.12000000e+03, 9.07770000e-01]), np.array([7.14000000e+03, 8.42230000e-01]),
        np.array([7.16000000e+03, 7.50710000e-01]), np.array([7.18000000e+03, 6.41160000e-01]),
        np.array([7.20000000e+03, 5.23860000e-01]), np.array([7.22000000e+03, 4.06260000e-01]),
        np.array([7.24000000e+03, 2.92960000e-01]), np.array([7.26000000e+03, 1.90700000e-01]),
        np.array([7.28000000e+03, 1.08160000e-01]), np.array([7.30000000e+03, 5.17800000e-02]),
        np.array([7.32000000e+03, 2.01900000e-02]), np.array([7.34000000e+03, 6.72000000e-03]),
        np.array([7.36000000e+03, 2.48000000e-03]), np.array([7.38000000e+03, 1.06000000e-03]),
        np.array([7.40000000e+03, 4.90000000e-04]), np.array([7.42000000e+03, 2.10000000e-04]),
        np.array([7.44000000e+03, 9.00000000e-05]), np.array([7.46000000e+03, 2.00000000e-05]), np.array([7480., 0.])]

# Columns assigned to wavelength and transmission intensity.
wavelength = np.array([row[0] for row in data])
transmission = np.array([row[1] for row in data])

'''
# Plot wavelength against transmission
import matplotlib.pyplot as plt

plt.scatter(wavelength, transmission)
plt.show()
'''

# Define band with name and register locally to sncosmo
band = sncosmo.Bandpass(wavelength, transmission, name='PTF48R')
sncosmo.registry.register(band)

# print 'transmission-weighted effective wavelength:', band.wave_eff
